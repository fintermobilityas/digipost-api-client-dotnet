using System;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Digipost.Api.Client.Common;
using Microsoft.Extensions.Logging;
using Environment = System.Environment;

namespace Digipost.Api.Client.Internal;

internal sealed class AuthenticationHandler : DelegatingHandler
{
    static ILogger<DigipostClient> _logger;
    static readonly string UserAgent = $"digipost-api-client-dotnet/{Assembly.GetExecutingAssembly().GetName().Version} (netcore/{Environment.Version})";

    public AuthenticationHandler(ClientConfig clientConfig, X509Certificate2 certificate, ILoggerFactory loggerFactory)
    {
        _logger = loggerFactory.CreateLogger<DigipostClient>();
        ClientConfig = clientConfig;
        Certificate = certificate;
        Method = WebRequestMethods.Http.Get;
    }

    ClientConfig ClientConfig { get; }

    X509Certificate2 Certificate { get; }

    string Method { get; set; }

    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    {
        var date = DateTime.UtcNow.ToString("R");
        var brokerId = ClientConfig.Broker.Id.ToString();

        request.Headers.Add("X-Digipost-UserId", brokerId);
        request.Headers.Add("Date", date);
        request.Headers.Add("Accept", DigipostVersion.V8);
        request.Headers.Add("User-Agent", UserAgent);
        Method = request.Method.ToString();

        using var sha256 = SHA256.Create();

        string contentHash = null;

        if (request.Content != null)
        {
            var stream = await request.Content.ReadAsStreamAsync();
            contentHash = ComputeHash(sha256, stream);
            stream.Seek(0, SeekOrigin.Begin);
            request.Headers.Add("X-Content-SHA256", contentHash);
        }

        var signature = ComputeSignature(sha256, Method, request.RequestUri, date, contentHash, brokerId, Certificate, ClientConfig.LogRequestAndResponse);
        request.Headers.Add("X-Digipost-Signature", signature);

        return await base.SendAsync(request, cancellationToken);
    }

    internal static string ComputeHash(HashAlgorithm hashAlgorithm, Stream stream)
    {
        var hashBytes = hashAlgorithm.ComputeHash(stream);
        return Convert.ToBase64String(hashBytes);
    }

    internal static string ComputeSignature(HashAlgorithm hashAlgorithm, string method, Uri uri, string date, string contentSha256Hash,
        string userId, X509Certificate2 certificate, bool logRequestAndResponse)
    {
        var uriParts = new UriParts(uri);

        if (logRequestAndResponse)
        {
            _logger.LogDebug("Compute signature, canonical string generated by .NET Client:");
            _logger.LogDebug("=== SIGNATURE DATA START===");
        }
        
        var messageHeaderStringBuilder = new StringBuilder();
        messageHeaderStringBuilder.Append(method.ToUpper());
        
        if (contentSha256Hash != null)
        {
            messageHeaderStringBuilder
                .Append('\n')
                .Append(uriParts.AbsoluteUri)
                .Append('\n')
                .Append("date: ")
                .Append(date)
                .Append('\n')
                .Append("x-content-sha256: ")
                .Append(contentSha256Hash)
                .Append('\n')
                .Append("x-digipost-userid: ")
                .Append(userId)
                .Append('\n')
                .Append(uriParts.Parameters.ToLower())
                .Append('\n');
        }
        else
        {
            messageHeaderStringBuilder
                .Append('\n')
                .Append(uriParts.AbsoluteUri)
                .Append('\n')
                .Append("date: ")
                .Append(date)
                .Append('\n')
                .Append("x-digipost-userid: ")
                .Append(userId)
                .Append('\n')
                .Append(uriParts.Parameters.ToLower())
                .Append('\n');
        }

        var messageHeader = messageHeaderStringBuilder.ToString();
        
        if (logRequestAndResponse)
        {
            _logger.LogDebug("{MessageHeader}", messageHeader);
            _logger.LogDebug("=== SIGNATURE DATA END ===");
        }

        var messageBytes = Encoding.UTF8.GetBytes(messageHeader);

        using var rsaPrivateKey = certificate.GetRSAPrivateKey();
        var hash = hashAlgorithm.ComputeHash(messageBytes);
        var signature = rsaPrivateKey.SignHash(hash, HashAlgorithmName.SHA256, RSASignaturePadding.Pkcs1);

        return Convert.ToBase64String(signature);
    }

    sealed class UriParts
    {
        public UriParts(Uri uri)
        {
            var datUri = uri.IsAbsoluteUri ? uri.AbsolutePath : $"/{uri.OriginalString}";
            AbsoluteUri = datUri.ToLower();
            Parameters = uri.Query.Length > 0 ? uri.Query.Substring(1) : string.Empty;
        }

        public string AbsoluteUri { get; }

        public string Parameters { get; }
    }
}